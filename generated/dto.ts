/*
 Generated by typeshare 1.13.2
*/

export enum LogLevelDTO {
	Info = "info",
	Debug = "debug",
	Trace = "trace",
	Error = "error",
}

export interface ClientConfigDTO {
	log_level: LogLevelDTO;
}

export interface ConnectInfo {
	ws_path: string;
	host?: string;
}

export interface DebounceDTO {
	kind: string;
	ms: string;
}

export interface FileChangedDTO {
	path: string;
}

export interface FilesChangedDTO {
	paths: string[];
}

/** @discriminator kind */
export type ServerIdentityDTO = 
	| { kind: "Both", payload: {
	name: string;
	bind_address: string;
}}
	| { kind: "Address", payload: {
	bind_address: string;
}}
	| { kind: "Named", payload: {
	name: string;
}}
	| { kind: "Port", payload: {
	port: number;
}}
	| { kind: "PortNamed", payload: {
	port: number;
	name: string;
}};

export interface ServerDTO {
	id: string;
	identity: ServerIdentityDTO;
	socket_addr: string;
}

export interface GetActiveServersResponseDTO {
	servers: ServerDTO[];
}

export interface InjectConfig {
	connect: ConnectInfo;
	ctx_message: string;
}

export interface InputAcceptedDTO {
	path: string;
}

/** @discriminator kind */
export type RouteKindDTO = 
	| { kind: "Html", payload: {
	html: string;
}}
	| { kind: "Json", payload: {
	json_str: string;
}}
	| { kind: "Raw", payload: {
	raw: string;
}}
	| { kind: "Sse", payload: {
	sse: string;
}}
	| { kind: "Proxy", payload: {
	proxy: string;
}}
	| { kind: "Dir", payload: {
	dir: string;
	base?: string;
}};

export interface RouteDTO {
	path: string;
	kind: RouteKindDTO;
}

/** @discriminator kind */
export type ServerChange = 
	| { kind: "Stopped", payload: {
	bind_address: string;
}}
	| { kind: "Started", payload?: undefined }
	| { kind: "Patched", payload?: undefined }
	| { kind: "Errored", payload: {
	error: string;
}};

export interface ServerChangeSetItem {
	identity: ServerIdentityDTO;
	change: ServerChange;
}

export interface ServerChangeSet {
	items: ServerChangeSetItem[];
}

export interface ServerDesc {
	routes: RouteDTO[];
	id: string;
}

export interface ServersChangedDTO {
	servers_resp: GetActiveServersResponseDTO;
}

export interface StderrLineDTO {
	line: string;
	prefix?: string;
}

export interface StdoutLineDTO {
	line: string;
	prefix?: string;
}

export interface StoppedWatchingDTO {
	paths: string[];
}

export interface WatchingDTO {
	paths: string[];
	debounce: DebounceDTO;
}

/**
 * An event describing a change
 * @discriminator kind
 */
export type ChangeDTO = 
	| { kind: "Fs", payload: {
	path: string;
	change_kind: ChangeKind;
}}
	| { kind: "FsMany", payload: ChangeDTO[] };

export enum ChangeKind {
	Changed = "Changed",
	Added = "Added",
	Removed = "Removed",
}

/** @discriminator kind */
export type ClientEvent = 
	| { kind: "Change", payload: ChangeDTO }
	| { kind: "WsConnection", payload: ClientConfigDTO }
	| { kind: "Config", payload: ClientConfigDTO };

export enum EventLevel {
	External = "BSLIVE_EXTERNAL",
}

/** @discriminator kind */
export type ExternalEventsDTO = 
	| { kind: "ServersChanged", payload: ServersChangedDTO }
	| { kind: "Watching", payload: WatchingDTO }
	| { kind: "WatchingStopped", payload: StoppedWatchingDTO }
	| { kind: "FileChanged", payload: FileChangedDTO }
	| { kind: "FilesChanged", payload: FilesChangedDTO }
	| { kind: "InputFileChanged", payload: FileChangedDTO }
	| { kind: "InputAccepted", payload: InputAcceptedDTO }
	| { kind: "OutputLine", payload: OutputLineDTO };

/** @discriminator kind */
export type InputErrorDTO = 
	| { kind: "MissingInputs", payload: string }
	| { kind: "InvalidInput", payload: string }
	| { kind: "NotFound", payload: string }
	| { kind: "InputWriteError", payload: string }
	| { kind: "PathError", payload: string }
	| { kind: "PortError", payload: string }
	| { kind: "DirError", payload: string }
	| { kind: "YamlError", payload: string }
	| { kind: "MarkdownError", payload: string }
	| { kind: "HtmlError", payload: string }
	| { kind: "Io", payload: string }
	| { kind: "UnsupportedExtension", payload: string }
	| { kind: "MissingExtension", payload: string }
	| { kind: "EmptyInput", payload: string }
	| { kind: "BsLiveRules", payload: string };

/** @discriminator kind */
export type InternalEventsDTO = 
	| { kind: "ServersChanged", payload: GetActiveServersResponseDTO }
	| { kind: "TaskReport", payload: {
	id: string;
}};

/** @discriminator kind */
export type OutputLineDTO = 
	| { kind: "Stdout", payload: StdoutLineDTO }
	| { kind: "Stderr", payload: StderrLineDTO };

/** @discriminator kind */
export type StartupEventDTO = 
	| { kind: "Started", payload?: undefined }
	| { kind: "FailedStartup", payload: string };

